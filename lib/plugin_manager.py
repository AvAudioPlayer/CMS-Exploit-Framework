#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sqlite3
from imp import find_module, load_module
from os import walk


class PluginManager(object):
    """
    插件管理器
    """
    def __init__(self):
        self.plugins = {}
        self.conn = sqlite3.connect("database/core.db")
        self.conn.text_factory = str
        self.cu = self.conn.cursor()
        self.current_plugin = ""

    def version(self):
        """
        插件库版本
        :return: string, 插件库版本
        """
        self.cu.execute("select version from core")
        return self.cu.fetchone()[0]

    def cms_num(self):
        """
        查询 CMS 数量
        :return: int, CMS 数量
        """
        self.cu.execute("select cms from plugins")
        return len(set(self.cu.fetchall()))

    def plugins_num(self):
        """
        查询插件数量
        :return: int, 插件数量
        """
        self.cu.execute("select count(*) from plugins")
        return self.cu.fetchone()[0]

    def list_plugins(self):
        """
        显示插件列表
        :return: list, 插件列表
        """
        self.cu.execute("select name, scope, description from plugins")
        return self.cu.fetchall()


    def search_plugin(self, keyword):
        """
        搜索插件
        :param keyword: string, 插件信息
        :return: list, 插件列表
        """
        keyword = "%" + keyword + "%"
        self.cu.execute("select name, scope, description from plugins where "
                        "name like ? or description like ?", (keyword, keyword))
        return self.cu.fetchall()

    def info_plugin(self, plugin):
        """
        显示插件信息
        :param plugin: string, 插件名
        :return: string, 插件信息
        """
        self.cu.execute("select name, author, cms, scope, description, "
                        "reference from plugins where name=?", (plugin,))
        return self.cu.fetchone()

    def load_plugin(self, plugin):
        """
        加载插件
        :param plugin: string, 插件名
        :return:
        """
        if plugin not in self.plugins:
            self.plugins[plugin] = {}
            plugin_name = plugin[plugin.index("_")+1:]
            plugin_dir = "plugins/" + plugin[:plugin.index("_")]
            module = load_module(plugin_name,
                                 *find_module(plugin_name, [plugin_dir]))
            self.plugins[plugin]["options"] = module.options
            self.plugins[plugin]["exploit"] = module.exploit
        self.current_plugin = plugin

    def show_options(self):
        """
        显示插件设置项
        :return:
        """
        return self.plugins[self.current_plugin]["options"]

    def set_option(self, option, value):
        """
        设置插件选项
        :param option: string, 设置项名称
        :param value: string, 设置值
        :return:
        """
        for op in self.plugins[self.current_plugin]["options"]:
            if op["Name"] == option:
                op["Current Setting"] = value
                return "%s => %s" % (op["Name"], value)
                break
        else:
            return "Invalid option: %s" % option

    def exec_plugin(self):
        """
        执行插件
        :return:
        """
        options = {}
        for option in self.plugins[self.current_plugin]["options"]:
            name = option["Name"]
            current_setting = option["Current Setting"]
            required = option["Required"]
            if required and not current_setting:
                return "%s is required!" % name
            else:
                if name == "URL":
                    if current_setting.endswith("/"):
                        options["URL"] = current_setting[:-1]
                    else:
                        options["URL"] = current_setting
                elif name == "Cookie":
                    options["Cookie"] = dict(
                        i.split("=", 1)
                        for i in current_setting.split("; ")
                    )
                elif name == "Thread":
                    options["Thread"] = int(current_setting)
                else:
                    options[name] = current_setting
        try:
            vuln = self.plugins[self.current_plugin]["exploit"](**options)
            if vuln:
                self.cu.execute("insert into vulns values (?, ?)",
                                (self.current_plugin, vuln))
                self.conn.commit()
            else:
                return "Exploit failed, perhaps not vulnerable?"
        except Exception, e:
            return "%s: %s" % (self.current_plugin, e.message)

    def show_vulns(self):
        """
        显示当前漏洞信息
        :return:
        """
        self.cu.execute("select plugin, vuln from vulns")
        return self.cu.fetchall()

    def clear_vulns(self):
        """
        清空漏洞信息
        :return:
        """
        self.cu.execute("delete from vulns")
        self.conn.commit()

    def db_rebuild(self):
        """
        重建数据库
        :return:
        """
        self.cu.execute("delete from plugins")
        self.conn.commit()
        for dirpath, dirnames, filenames in walk("plugins/"):
            if dirpath == "plugins/":
                continue
            db = {
                "cms": dirpath.split("/")[1],
                "plugins": []
            }
            for fn in filenames:
                if fn.endswith("py"):
                    db["plugins"].append(fn.split(".")[0])
            for plugin in db["plugins"]:
                p = load_module(plugin, *find_module(plugin, [dirpath]))
                name = db["cms"] + "_" + plugin
                author = p.author
                scope = p.scope
                description = p.description
                reference = p.reference
                self.cu.execute("insert into plugins values (?, ?, ?, ?, ?, ?)",
                                (name, author, db["cms"], scope, description,
                                 reference))
                self.conn.commit()

    def update(self):
        """
        更新插件
        :return:
        """
        pass

    def exit(self):
        """
        退出插件管理器
        :return:
        """
        self.conn.close()
